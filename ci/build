#!/bin/bash -eu

set -o pipefail

readonly KERNEL_VERSION=${1:?}
readonly ARCH=${2:?}
readonly GCC_MAJOR_VERSION=$(echo '#include <stdio.h>
void main() { printf("%u\n", __GNUC__); }' | gcc -x c - -o /tmp/getgccversion  && /tmp/getgccversion)
readonly PROC_COUNT=$(grep -c '^processor' /proc/cpuinfo)


# download
kernel_archive=~/Linux/linux-${KERNEL_VERSION}.tar.xz
if [ ! -f $kernel_archive ]
then
  mkdir -pv $(dirname $kernel_archive)
  kernel_version_first_digit=$(echo $KERNEL_VERSION | cut -d '.' -f 1)
  if [ $kernel_version_first_digit -eq 2 ]
  then
    kernel_version_major=$(echo $KERNEL_VERSION | cut -d '.' -f 1-2)
  else
    kernel_version_major=$kernel_version_first_digit.x
  fi
  kernel_version_minor=$(echo $KERNEL_VERSION | cut -d '.' -f 1-3)
  url=https://www.kernel.org/pub/linux/kernel/v${kernel_version_major}/linux-${KERNEL_VERSION}.tar.xz
  if [ $kernel_version_first_digit -eq 2 ]
  then
    url_lts=https://www.kernel.org/pub/linux/kernel/v${kernel_version_major}/longterm/v${kernel_version_minor}/linux-${KERNEL_VERSION}.tar.xz
    if ! curl -fI HEAD $url &> /dev/null
    then
      url=$url_lts
    fi
  fi
  curl "$url" > $kernel_archive
fi

# extract kernel
kernel_dir=$HOME/Linux/linux-${KERNEL_VERSION}
if [ ! -d $kernel_dir ]
then
  tar -xJf $kernel_archive -C ~/Linux
fi

pushd $kernel_dir
  # fix compilation of old kernels with recent GCC
  compiler_file=compiler-gcc${GCC_MAJOR_VERSION}.h
  if [ ! -f include/linux/${compiler_file} -a ! -h include/linux/${compiler_file} ]
  then
    pushd include/linux
    if [ -f compiler-gcc5.h -a $GCC_MAJOR_VERSION -gt 5 ]
    then
      ln -sv compiler-gcc5.h ${compiler_file}
    else
      ln -sv compiler-gcc4.h ${compiler_file}
    fi
    popd
  fi

  # configure kernel
  make mrproper
  make -j $PROC_COUNT ARCH=${ARCH} defconfig || true
  make -j $PROC_COUNT ARCH=${ARCH} modules_prepare || true
popd

# build
pushd src
make clean
make -j $PROC_COUNT KERNELDIR=$kernel_dir ARCH=$ARCH
popd
